{"version":3,"sources":["logo.svg","components/Conversor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Conversor","props","state","moedaA_valor","moedaB_valor","converter","bind","de_para","this","moedaA","moedaB","url","fetch","then","res","json","cotacao","val","parseFloat","toFixed","setState","className","type","onChange","event","target","value","onClick","Component","App","src","alt","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,mKCGtBC,G,wDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,aAAc,GACdC,aAAc,GAElB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPF,E,wDAUN,IAAD,OACJC,EAAO,UAAMC,KAAKP,MAAMQ,OAAjB,YAA2BD,KAAKP,MAAMS,QAC7CC,EAAG,gFAA4EJ,EAA5E,cAEPK,MAAMD,GACDE,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAE,GACF,IAAIC,EAAUD,EAAKR,GAASU,IACxBb,EAAgBc,WAAW,EAAKhB,MAAMC,aAAea,GAAUG,QAAQ,GAC3E,EAAKC,SAAS,CAAEhB,sB,+BAIlB,IAAD,OACL,OACI,yBAAKiB,UAAU,aACX,4BAAKb,KAAKP,MAAMQ,OAAhB,SAA8BD,KAAKP,MAAMS,QACzC,2BAAOY,KAAK,OAAOC,SAAU,SAACC,GAAY,EAAKJ,SAAS,CAAEjB,aAAcqB,EAAMC,OAAOC,WACrF,2BAAOJ,KAAK,SAASI,MAAM,YAAYC,QAASnB,KAAKH,YACrD,4BAAKG,KAAKN,MAAME,mB,GAjCOwB,cC0BxBC,MAxBf,WACE,OACE,yBAAKR,UAAU,OACb,wBAAIA,UAAU,UACZ,yBAAKS,IAAI,cAAcC,IAAI,oBAC3B,uBAAGC,GAAG,SAAN,uBAEF,yBAAKX,UAAU,iBACb,kBAAC,EAAD,CAAWZ,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAEjC,yBAAKW,UAAU,iBACb,kBAAC,EAAD,CAAWZ,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAEjC,yBAAKW,UAAU,iBACb,kBAAC,EAAD,CAAWZ,OAAO,MAAMC,OAAO,QAC/B,kBAAC,EAAD,CAAWD,OAAO,MAAMC,OAAO,SAEjC,yBAAKW,UAAU,WAAf,uCCZcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74ae201b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport './Conversor.css'\n\nexport default class Conversor extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moedaA_valor: \"\",\n            moedaB_valor: 0,\n        }\n        this.converter = this.converter.bind(this);\n    }\n\n    converter() {\n        let de_para = `${this.props.moedaA}_${this.props.moedaB}`;\n        let url = `https://free.currconv.com/api/v7/convert?apiKey=do-not-use-this-key&q=${de_para}&compact=y`;\n\n        fetch(url)\n            .then(res => {\n                return res.json();\n            })\n            .then(json => {\n                let cotacao = json[de_para].val;\n                let moedaB_valor = (parseFloat(this.state.moedaA_valor * cotacao)).toFixed(2)\n                this.setState({ moedaB_valor });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"conversor\">\n                <h2>{this.props.moedaA} para {this.props.moedaB}</h2>\n                <input type=\"text\" onChange={(event) => { this.setState({ moedaA_valor: event.target.value }) }} />\n                <input type=\"button\" value=\"Converter\" onClick={this.converter} />\n                <h2>{this.state.moedaB_valor}</h2>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Conversor from './components/Conversor'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"titulo\">\n        <img src=\"logo192.png\" alt=\"Made with React\" />\n        <p id=\"title\">CONVERSOR REACT.JS</p>\n      </h1>\n      <div className=\"convertFromTo\">\n        <Conversor moedaA=\"USD\" moedaB=\"BRL\" />\n        <Conversor moedaA=\"BRL\" moedaB=\"USD\" />\n      </div>\n      <div className=\"convertFromTo\">\n        <Conversor moedaA=\"EUR\" moedaB=\"BRL\" />\n        <Conversor moedaA=\"BRL\" moedaB=\"EUR\" />\n      </div>\n      <div className=\"convertFromTo\">\n        <Conversor moedaA=\"GBP\" moedaB=\"BRL\" />\n        <Conversor moedaA=\"BRL\" moedaB=\"GBP\" />\n      </div>\n      <div className=\"credits\">Desenvolvido por Everton Trajano.</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}